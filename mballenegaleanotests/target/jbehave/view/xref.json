{"xref": {
  "stories": [
    {
      "story": {
        "path": "stories/DisruptionStory.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": "",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "Getting data about disrupted streets in London today",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I want to know the streets that are disrupted today",
              "When I select todays date",
              "Then I should get the streets that are disrupted today"
            ]
          },
          {
            "title": "Getting data about disrupted streets in London today",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I want to know the streets that were disrupted yesterday",
              "When I select yesterdays date",
              "Then I should get the streets that were disrupted yesterday"
            ]
          },
          {
            "title": "Getting data about disrupted streets in London today",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I want to know the streets that are disrupted last monday",
              "When I select last monday date",
              "Then I should get the streets that were disrupted last monday"
            ]
          }
        ],
        "name": "DisruptionStory.story"
      },
      "localizedNarrative": "As a \nI want to \nSo that ",
      "allowed": true,
      "status": "PENDING",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "Getting data about disrupted streets in London today",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I want to know the streets that are disrupted today",
              "When I select todays date",
              "Then I should get the streets that are disrupted today"
            ]
          },
          "storyPath": "stories/DisruptionStory.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [],
              "results": [
                {
                  "step": "Given I want to know the streets that are disrupted today",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "Given I want to know the streets that are disrupted today",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "c20fd811-2ac3-468b-8e82-0098d7a933f4"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "When I select todays date",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "When I select todays date",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "5af4cb32-3f65-4fc0-aa4c-b8031d33fe9b"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "Then I should get the streets that are disrupted today",
                  "type": "NOT_PERFORMED",
                  "parametrisedStep": "Then I should get ?the streets that are disrupted today?",
                  "durationInMillis": 0
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "storyAndScenarioMeta": {
              "properties": []
            },
            "scenario": {
              "title": "Getting data about disrupted streets in London today",
              "meta": {
                "properties": []
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FORMATTING",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given I want to know the streets that are disrupted today",
                "When I select todays date",
                "Then I should get the streets that are disrupted today"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "PENDING"
        },
        {
          "scenario": {
            "title": "Getting data about disrupted streets in London today",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I want to know the streets that were disrupted yesterday",
              "When I select yesterdays date",
              "Then I should get the streets that were disrupted yesterday"
            ]
          },
          "storyPath": "stories/DisruptionStory.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [],
              "results": [
                {
                  "step": "Given I want to know the streets that were disrupted yesterday",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "Given I want to know the streets that were disrupted yesterday",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "dc23c324-5ed8-4c2a-8132-06e4ae853c8f"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "When I select yesterdays date",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "When I select yesterdays date",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "35d85bc2-7d23-4cc2-92ee-245724d58b31"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "Then I should get the streets that were disrupted yesterday",
                  "type": "NOT_PERFORMED",
                  "parametrisedStep": "Then I should get ?the streets that were disrupted yesterday?",
                  "durationInMillis": 0
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "storyAndScenarioMeta": {
              "properties": []
            },
            "scenario": {
              "title": "Getting data about disrupted streets in London today",
              "meta": {
                "properties": []
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FORMATTING",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given I want to know the streets that were disrupted yesterday",
                "When I select yesterdays date",
                "Then I should get the streets that were disrupted yesterday"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "PENDING"
        },
        {
          "scenario": {
            "title": "Getting data about disrupted streets in London today",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I want to know the streets that are disrupted last monday",
              "When I select last monday date",
              "Then I should get the streets that were disrupted last monday"
            ]
          },
          "storyPath": "stories/DisruptionStory.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [],
              "results": [
                {
                  "step": "Given I want to know the streets that are disrupted last monday",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "Given I want to know the streets that are disrupted last monday",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "65d4f8b3-994f-466e-9a53-09aa676610f1"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "When I select last monday date",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "When I select last monday date",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "6743ac2e-5fa6-4c1d-a855-d3000b592a9f"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "Then I should get the streets that were disrupted last monday",
                  "type": "NOT_PERFORMED",
                  "parametrisedStep": "Then I should get ?the streets that were disrupted last monday?",
                  "durationInMillis": 0
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "storyAndScenarioMeta": {
              "properties": []
            },
            "scenario": {
              "title": "Getting data about disrupted streets in London today",
              "meta": {
                "properties": []
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FORMATTING",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given I want to know the streets that are disrupted last monday",
                "When I select last monday date",
                "Then I should get the streets that were disrupted last monday"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "PENDING"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 318
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "stories/LookupAStation.story",
        "description": {
          "descriptionAsString": "Lookup a station status, street and landmarks"
        },
        "narrative": {
          "inOrderTo": "know a station street, landmarks and status",
          "asA": "bike user",
          "iWantTo": "look up for the station street, landmarks and status",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "Looking up for the street and nearby landmarks of a given station",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I want to know the street of Hoxton station and nearby landmarks",
              "When I insert Hoxton as the query in API",
              "Then I should get Fanshaw Street, Hoxton"
            ]
          },
          {
            "title": "Looking for a station status and occupancy",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I want to know the state of Soho Square station and its occupancy",
              "When I insert Soho Square in the search field",
              "Then I should get Soho Square status and its occupancy"
            ]
          }
        ],
        "name": "LookupAStation.story"
      },
      "localizedNarrative": "In order to know a station street, landmarks and status\nAs a bike user\nI want to look up for the station street, landmarks and status",
      "allowed": true,
      "status": "PENDING",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "Looking up for the street and nearby landmarks of a given station",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I want to know the street of Hoxton station and nearby landmarks",
              "When I insert Hoxton as the query in API",
              "Then I should get Fanshaw Street, Hoxton"
            ]
          },
          "storyPath": "stories/LookupAStation.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [],
              "results": [
                {
                  "step": "Given I want to know the street of Hoxton station and nearby landmarks",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "Given I want to know the street of ?Hoxton? station and nearby landmarks",
                  "durationInMillis": 3065
                },
                {
                  "step": "When I insert Hoxton as the query in API",
                  "type": "SUCCESSFUL",
                  "parametrisedStep": "When I insert Hoxton as the query in API",
                  "durationInMillis": 3444
                },
                {
                  "step": "Then I should get Fanshaw Street, Hoxton",
                  "type": "FAILED",
                  "throwable": {
                    "detailMessage": "Then I should get Fanshaw Street, Hoxton",
                    "cause": {
                      "@class": "java.lang.AssertionError",
                      "detailMessage": "1 expectation failed.\nJSON path [0].commonName doesn't match.\nExpected: a string containing \"Hoxtonghjk\"\n  Actual: Windsor Terrace, Hoxton\n",
                      "stackTrace": [
                        "sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)",
                        "sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)",
                        "sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)",
                        "java.lang.reflect.Constructor.newInstance(Constructor.java:423)",
                        "org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)",
                        "org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)",
                        "org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)",
                        "org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)",
                        "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)",
                        "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)",
                        "com.jayway.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:598)",
                        "com.jayway.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)",
                        "com.jayway.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:760)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                        "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                        "java.lang.reflect.Method.invoke(Method.java:498)",
                        "org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)",
                        "org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)",
                        "org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)",
                        "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)",
                        "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)",
                        "com.jayway.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:251)",
                        "com.jayway.restassured.specification.ResponseSpecification$content$1.callCurrent(Unknown Source)",
                        "org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)",
                        "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)",
                        "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:190)",
                        "com.jayway.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:234)",
                        "com.jayway.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:264)",
                        "mballenegaleanotests.steps.LookUpAStationSteps.whenTheUserLooksUpTheDefinitionOf(LookUpAStationSteps.java:72)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                        "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                        "java.lang.reflect.Method.invoke(Method.java:498)",
                        "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                        "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                        "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                        "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                        "java.lang.Thread.run(Thread.java:748)"
                      ],
                      "suppressedExceptions": [
                        [],
                        []
                      ]
                    },
                    "stackTrace": [
                      "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "83bbf9fa-f50c-4e34-849c-ab8535052065"
                  },
                  "parametrisedStep": "Then I should get ?Fanshaw Street, Hoxton?",
                  "durationInMillis": 709
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "storyAndScenarioMeta": {
              "properties": []
            },
            "scenario": {
              "title": "Looking up for the street and nearby landmarks of a given station",
              "meta": {
                "properties": []
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FORMATTING",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given I want to know the street of Hoxton station and nearby landmarks",
                "When I insert Hoxton as the query in API",
                "Then I should get Fanshaw Street, Hoxton"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "FAILED"
        },
        {
          "scenario": {
            "title": "Looking for a station status and occupancy",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I want to know the state of Soho Square station and its occupancy",
              "When I insert Soho Square in the search field",
              "Then I should get Soho Square status and its occupancy"
            ]
          },
          "storyPath": "stories/LookupAStation.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [],
              "results": [
                {
                  "step": "Given I want to know the state of Soho Square station and its occupancy",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "Given I want to know the state of Soho Square station and its occupancy",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "ce601c0e-5e94-43ba-b965-6dc6dab35a7d"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "When I insert Soho Square in the search field",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "When I insert Soho Square in the search field",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "05d57932-9c96-47fa-ae76-05b59406f417"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "Then I should get Soho Square status and its occupancy",
                  "type": "NOT_PERFORMED",
                  "parametrisedStep": "Then I should get ?Soho Square status and its occupancy?",
                  "durationInMillis": 0
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "storyAndScenarioMeta": {
              "properties": []
            },
            "scenario": {
              "title": "Looking for a station status and occupancy",
              "meta": {
                "properties": []
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FORMATTING",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given I want to know the state of Soho Square station and its occupancy",
                "When I insert Soho Square in the search field",
                "Then I should get Soho Square status and its occupancy"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "PENDING"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 7365
      },
      "givenStory": false
    },
    {
      "story": {
        "path": "stories/RouteTimes.story",
        "description": {
          "descriptionAsString": "Ask for a route time on bicycle"
        },
        "narrative": {
          "inOrderTo": "administrate my time",
          "asA": "bicycle rider of the London city",
          "iWantTo": "know the time I'll spent from a given address to another",
          "soThat": ""
        },
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "lifecycle": {
          "before": {
            "steps": [
              []
            ]
          },
          "after": []
        },
        "scenarios": [
          {
            "title": "Get estimated route time",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I am in 76 Windsor Dr, Orpington BR6 6HF, UK",
              "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
              "When I ask for the route time",
              "Then The answer from the program should be 1 mins"
            ]
          },
          {
            "title": "Get estimated route time for a non-existing address",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I am in 123 fake street",
              "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
              "When I ask for the route time",
              "Then The answer from the program should be Sorry, we can't find a journey matching your criteria"
            ]
          }
        ],
        "name": "RouteTimes.story"
      },
      "localizedNarrative": "In order to administrate my time\nAs a bicycle rider of the London city\nI want to know the time I'll spent from a given address to another",
      "allowed": true,
      "status": "PENDING",
      "givenStories": [],
      "scenarios": [
        {
          "scenario": {
            "title": "Get estimated route time",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I am in 76 Windsor Dr, Orpington BR6 6HF, UK",
              "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
              "When I ask for the route time",
              "Then The answer from the program should be 1 mins"
            ]
          },
          "storyPath": "stories/RouteTimes.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [],
              "results": [
                {
                  "step": "Given I am in 76 Windsor Dr, Orpington BR6 6HF, UK",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "Given I am in 76 Windsor Dr, Orpington BR6 6HF, UK",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "dbcef606-e09d-474c-8ada-83880966fffc"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "0f383332-40c4-4214-8cfa-578bb983b697"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "When I ask for the route time",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "When I ask for the route time",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "7a07f04a-4e31-47a5-8adb-9c0b486f3699"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "Then The answer from the program should be 1 mins",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "Then The answer from the program should be 1 mins",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "9de1edc3-b6d4-490a-952d-460d97a10de1"
                  },
                  "durationInMillis": 0
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "storyAndScenarioMeta": {
              "properties": []
            },
            "scenario": {
              "title": "Get estimated route time",
              "meta": {
                "properties": []
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FORMATTING",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given I am in 76 Windsor Dr, Orpington BR6 6HF, UK",
                "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
                "When I ask for the route time",
                "Then The answer from the program should be 1 mins"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "PENDING"
        },
        {
          "scenario": {
            "title": "Get estimated route time for a non-existing address",
            "meta": {
              "properties": []
            },
            "givenStories": {
              "givenStories": [],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            },
            "steps": [
              "Given I am in 123 fake street",
              "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
              "When I ask for the route time",
              "Then The answer from the program should be Sorry, we can't find a journey matching your criteria"
            ]
          },
          "storyPath": "stories/RouteTimes.story",
          "allowed": true,
          "normalPerformableScenario": {
            "parameters": [],
            "givenStories": [],
            "beforeSteps": {
              "matches": []
            },
            "steps": {
              "matches": [],
              "results": [
                {
                  "step": "Given I am in 123 fake street",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "Given I am in 123 fake street",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "72c33457-28b8-41a0-b801-c18bb03a6a0b"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "f6565b22-6f84-450b-90eb-7d88bb24ff47"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "When I ask for the route time",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "When I ask for the route time",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "c8fc15b3-d5d7-4daf-99d0-175c77112268"
                  },
                  "durationInMillis": 0
                },
                {
                  "step": "Then The answer from the program should be Sorry, we can't find a journey matching your criteria",
                  "type": "PENDING",
                  "throwable": {
                    "@class": "org.jbehave.core.failures.PendingStepFound",
                    "detailMessage": "Then The answer from the program should be Sorry, we can't find a journey matching your criteria",
                    "stackTrace": [
                      "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                      "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                      "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                      "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                      "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                      "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                      "java.lang.Thread.run(Thread.java:748)"
                    ],
                    "suppressedExceptions": [
                      [],
                      []
                    ],
                    "uuid": "59438141-8dfe-4fe7-9123-2f39083a147f"
                  },
                  "durationInMillis": 0
                }
              ]
            },
            "afterSteps": {
              "matches": []
            },
            "storyAndScenarioMeta": {
              "properties": []
            },
            "scenario": {
              "title": "Get estimated route time for a non-existing address",
              "meta": {
                "properties": []
              },
              "givenStories": {
                "givenStories": [],
                "givenStoriesAsString": "",
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FORMATTING",
                        {}
                      ],
                      [
                        "REPLACING",
                        {}
                      ],
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [],
                  "data": [],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [],
                  "trim": true
                }
              },
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FORMATTING",
                      {}
                    ],
                    [
                      "REPLACING",
                      {}
                    ],
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [],
                "data": [],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [],
                "trim": true
              },
              "steps": [
                "Given I am in 123 fake street",
                "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
                "When I ask for the route time",
                "Then The answer from the program should be Sorry, we can't find a journey matching your criteria"
              ]
            }
          },
          "examplePerformableScenarios": [],
          "status": "PENDING"
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 17
      },
      "givenStory": false
    }
  ],
  "scenarios": [
    {
      "scenario": {
        "title": "Getting data about disrupted streets in London today",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FORMATTING",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given I want to know the streets that are disrupted today",
          "When I select todays date",
          "Then I should get the streets that are disrupted today"
        ]
      },
      "storyPath": "stories/DisruptionStory.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [],
          "results": [
            {
              "step": "Given I want to know the streets that are disrupted today",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "Given I want to know the streets that are disrupted today",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "c20fd811-2ac3-468b-8e82-0098d7a933f4"
              },
              "durationInMillis": 0
            },
            {
              "step": "When I select todays date",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "When I select todays date",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "5af4cb32-3f65-4fc0-aa4c-b8031d33fe9b"
              },
              "durationInMillis": 0
            },
            {
              "step": "Then I should get the streets that are disrupted today",
              "type": "NOT_PERFORMED",
              "parametrisedStep": "Then I should get ?the streets that are disrupted today?",
              "durationInMillis": 0
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "storyAndScenarioMeta": {
          "properties": []
        },
        "scenario": {
          "title": "Getting data about disrupted streets in London today",
          "meta": {
            "properties": []
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given I want to know the streets that are disrupted today",
            "When I select todays date",
            "Then I should get the streets that are disrupted today"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "PENDING"
    },
    {
      "scenario": {
        "title": "Getting data about disrupted streets in London today",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FORMATTING",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given I want to know the streets that were disrupted yesterday",
          "When I select yesterdays date",
          "Then I should get the streets that were disrupted yesterday"
        ]
      },
      "storyPath": "stories/DisruptionStory.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [],
          "results": [
            {
              "step": "Given I want to know the streets that were disrupted yesterday",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "Given I want to know the streets that were disrupted yesterday",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "dc23c324-5ed8-4c2a-8132-06e4ae853c8f"
              },
              "durationInMillis": 0
            },
            {
              "step": "When I select yesterdays date",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "When I select yesterdays date",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "35d85bc2-7d23-4cc2-92ee-245724d58b31"
              },
              "durationInMillis": 0
            },
            {
              "step": "Then I should get the streets that were disrupted yesterday",
              "type": "NOT_PERFORMED",
              "parametrisedStep": "Then I should get ?the streets that were disrupted yesterday?",
              "durationInMillis": 0
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "storyAndScenarioMeta": {
          "properties": []
        },
        "scenario": {
          "title": "Getting data about disrupted streets in London today",
          "meta": {
            "properties": []
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given I want to know the streets that were disrupted yesterday",
            "When I select yesterdays date",
            "Then I should get the streets that were disrupted yesterday"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "PENDING"
    },
    {
      "scenario": {
        "title": "Getting data about disrupted streets in London today",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FORMATTING",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given I want to know the streets that are disrupted last monday",
          "When I select last monday date",
          "Then I should get the streets that were disrupted last monday"
        ]
      },
      "storyPath": "stories/DisruptionStory.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [],
          "results": [
            {
              "step": "Given I want to know the streets that are disrupted last monday",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "Given I want to know the streets that are disrupted last monday",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "65d4f8b3-994f-466e-9a53-09aa676610f1"
              },
              "durationInMillis": 0
            },
            {
              "step": "When I select last monday date",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "When I select last monday date",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "6743ac2e-5fa6-4c1d-a855-d3000b592a9f"
              },
              "durationInMillis": 0
            },
            {
              "step": "Then I should get the streets that were disrupted last monday",
              "type": "NOT_PERFORMED",
              "parametrisedStep": "Then I should get ?the streets that were disrupted last monday?",
              "durationInMillis": 0
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "storyAndScenarioMeta": {
          "properties": []
        },
        "scenario": {
          "title": "Getting data about disrupted streets in London today",
          "meta": {
            "properties": []
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given I want to know the streets that are disrupted last monday",
            "When I select last monday date",
            "Then I should get the streets that were disrupted last monday"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "PENDING"
    },
    {
      "scenario": {
        "title": "Looking up for the street and nearby landmarks of a given station",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FORMATTING",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given I want to know the street of Hoxton station and nearby landmarks",
          "When I insert Hoxton as the query in API",
          "Then I should get Fanshaw Street, Hoxton"
        ]
      },
      "storyPath": "stories/LookupAStation.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [],
          "results": [
            {
              "step": "Given I want to know the street of Hoxton station and nearby landmarks",
              "type": "SUCCESSFUL",
              "parametrisedStep": "Given I want to know the street of ?Hoxton? station and nearby landmarks",
              "durationInMillis": 3065
            },
            {
              "step": "When I insert Hoxton as the query in API",
              "type": "SUCCESSFUL",
              "parametrisedStep": "When I insert Hoxton as the query in API",
              "durationInMillis": 3444
            },
            {
              "step": "Then I should get Fanshaw Street, Hoxton",
              "type": "FAILED",
              "throwable": {
                "detailMessage": "Then I should get Fanshaw Street, Hoxton",
                "cause": {
                  "@class": "java.lang.AssertionError",
                  "detailMessage": "1 expectation failed.\nJSON path [0].commonName doesn't match.\nExpected: a string containing \"Hoxtonghjk\"\n  Actual: Windsor Terrace, Hoxton\n",
                  "stackTrace": [
                    "sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)",
                    "sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)",
                    "sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)",
                    "java.lang.reflect.Constructor.newInstance(Constructor.java:423)",
                    "org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)",
                    "org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)",
                    "org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)",
                    "org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)",
                    "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)",
                    "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)",
                    "com.jayway.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:598)",
                    "com.jayway.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)",
                    "com.jayway.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:760)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                    "java.lang.reflect.Method.invoke(Method.java:498)",
                    "org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)",
                    "org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)",
                    "org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)",
                    "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)",
                    "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)",
                    "com.jayway.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:251)",
                    "com.jayway.restassured.specification.ResponseSpecification$content$1.callCurrent(Unknown Source)",
                    "org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)",
                    "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)",
                    "org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:190)",
                    "com.jayway.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:234)",
                    "com.jayway.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:264)",
                    "mballenegaleanotests.steps.LookUpAStationSteps.whenTheUserLooksUpTheDefinitionOf(LookUpAStationSteps.java:72)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
                    "java.lang.reflect.Method.invoke(Method.java:498)",
                    "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:599)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                    "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                    "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                    "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                    "java.lang.Thread.run(Thread.java:748)"
                  ],
                  "suppressedExceptions": [
                    [],
                    []
                  ]
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$ParametrisedStep.perform(StepCreator.java:617)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "83bbf9fa-f50c-4e34-849c-ab8535052065"
              },
              "parametrisedStep": "Then I should get ?Fanshaw Street, Hoxton?",
              "durationInMillis": 709
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "storyAndScenarioMeta": {
          "properties": []
        },
        "scenario": {
          "title": "Looking up for the street and nearby landmarks of a given station",
          "meta": {
            "properties": []
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given I want to know the street of Hoxton station and nearby landmarks",
            "When I insert Hoxton as the query in API",
            "Then I should get Fanshaw Street, Hoxton"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "FAILED"
    },
    {
      "scenario": {
        "title": "Looking for a station status and occupancy",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FORMATTING",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given I want to know the state of Soho Square station and its occupancy",
          "When I insert Soho Square in the search field",
          "Then I should get Soho Square status and its occupancy"
        ]
      },
      "storyPath": "stories/LookupAStation.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [],
          "results": [
            {
              "step": "Given I want to know the state of Soho Square station and its occupancy",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "Given I want to know the state of Soho Square station and its occupancy",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "ce601c0e-5e94-43ba-b965-6dc6dab35a7d"
              },
              "durationInMillis": 0
            },
            {
              "step": "When I insert Soho Square in the search field",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "When I insert Soho Square in the search field",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "05d57932-9c96-47fa-ae76-05b59406f417"
              },
              "durationInMillis": 0
            },
            {
              "step": "Then I should get Soho Square status and its occupancy",
              "type": "NOT_PERFORMED",
              "parametrisedStep": "Then I should get ?Soho Square status and its occupancy?",
              "durationInMillis": 0
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "storyAndScenarioMeta": {
          "properties": []
        },
        "scenario": {
          "title": "Looking for a station status and occupancy",
          "meta": {
            "properties": []
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given I want to know the state of Soho Square station and its occupancy",
            "When I insert Soho Square in the search field",
            "Then I should get Soho Square status and its occupancy"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "PENDING"
    },
    {
      "scenario": {
        "title": "Get estimated route time",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FORMATTING",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given I am in 76 Windsor Dr, Orpington BR6 6HF, UK",
          "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
          "When I ask for the route time",
          "Then The answer from the program should be 1 mins"
        ]
      },
      "storyPath": "stories/RouteTimes.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [],
          "results": [
            {
              "step": "Given I am in 76 Windsor Dr, Orpington BR6 6HF, UK",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "Given I am in 76 Windsor Dr, Orpington BR6 6HF, UK",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "dbcef606-e09d-474c-8ada-83880966fffc"
              },
              "durationInMillis": 0
            },
            {
              "step": "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "0f383332-40c4-4214-8cfa-578bb983b697"
              },
              "durationInMillis": 0
            },
            {
              "step": "When I ask for the route time",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "When I ask for the route time",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "7a07f04a-4e31-47a5-8adb-9c0b486f3699"
              },
              "durationInMillis": 0
            },
            {
              "step": "Then The answer from the program should be 1 mins",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "Then The answer from the program should be 1 mins",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "9de1edc3-b6d4-490a-952d-460d97a10de1"
              },
              "durationInMillis": 0
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "storyAndScenarioMeta": {
          "properties": []
        },
        "scenario": {
          "title": "Get estimated route time",
          "meta": {
            "properties": []
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given I am in 76 Windsor Dr, Orpington BR6 6HF, UK",
            "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
            "When I ask for the route time",
            "Then The answer from the program should be 1 mins"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "PENDING"
    },
    {
      "scenario": {
        "title": "Get estimated route time for a non-existing address",
        "meta": {
          "properties": []
        },
        "givenStories": {
          "givenStories": [],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FORMATTING",
                {}
              ],
              [
                "REPLACING",
                {}
              ],
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [],
          "data": [],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [],
          "trim": true
        },
        "steps": [
          "Given I am in 123 fake street",
          "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
          "When I ask for the route time",
          "Then The answer from the program should be Sorry, we can't find a journey matching your criteria"
        ]
      },
      "storyPath": "stories/RouteTimes.story",
      "allowed": true,
      "normalPerformableScenario": {
        "parameters": [],
        "givenStories": [],
        "beforeSteps": {
          "matches": []
        },
        "steps": {
          "matches": [],
          "results": [
            {
              "step": "Given I am in 123 fake street",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "Given I am in 123 fake street",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:739)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:340)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "72c33457-28b8-41a0-b801-c18bb03a6a0b"
              },
              "durationInMillis": 0
            },
            {
              "step": "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "f6565b22-6f84-450b-90eb-7d88bb24ff47"
              },
              "durationInMillis": 0
            },
            {
              "step": "When I ask for the route time",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "When I ask for the route time",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "c8fc15b3-d5d7-4daf-99d0-175c77112268"
              },
              "durationInMillis": 0
            },
            {
              "step": "Then The answer from the program should be Sorry, we can't find a journey matching your criteria",
              "type": "PENDING",
              "throwable": {
                "@class": "org.jbehave.core.failures.PendingStepFound",
                "detailMessage": "Then The answer from the program should be Sorry, we can't find a journey matching your criteria",
                "stackTrace": [
                  "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                  "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                  "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:743)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:372)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:1072)",
                  "org.jbehave.core.embedder.PerformableTree$AbstractPerformableScenario.performRestartableSteps(PerformableTree.java:938)",
                  "org.jbehave.core.embedder.PerformableTree$NormalPerformableScenario.perform(PerformableTree.java:977)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:887)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:811)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:784)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:416)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:387)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:265)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:266)",
                  "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
                  "java.lang.Thread.run(Thread.java:748)"
                ],
                "suppressedExceptions": [
                  [],
                  []
                ],
                "uuid": "59438141-8dfe-4fe7-9123-2f39083a147f"
              },
              "durationInMillis": 0
            }
          ]
        },
        "afterSteps": {
          "matches": []
        },
        "storyAndScenarioMeta": {
          "properties": []
        },
        "scenario": {
          "title": "Get estimated route time for a non-existing address",
          "meta": {
            "properties": []
          },
          "givenStories": {
            "givenStories": [],
            "givenStoriesAsString": "",
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FORMATTING",
                    {}
                  ],
                  [
                    "REPLACING",
                    {}
                  ],
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [],
              "data": [],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [],
              "trim": true
            }
          },
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FORMATTING",
                  {}
                ],
                [
                  "REPLACING",
                  {}
                ],
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [],
            "data": [],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [],
            "trim": true
          },
          "steps": [
            "Given I am in 123 fake street",
            "And I am going to the address 3 Woodside, Orpington BR6 6JR, UK",
            "When I ask for the route time",
            "Then The answer from the program should be Sorry, we can't find a journey matching your criteria"
          ]
        }
      },
      "examplePerformableScenarios": [],
      "status": "PENDING"
    }
  ]
}}